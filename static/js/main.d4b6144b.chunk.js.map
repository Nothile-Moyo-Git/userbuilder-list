{"version":3,"sources":["Components/UserModal/UserBuilder.js","Components/UserModal/UserList.js","Components/ErrorModal/ErrorModal.js","App.js","reportWebVitals.js","index.js"],"names":["UserBuilder","props","useState","nameError","setNameError","ageError","setAgeError","newName","setNewName","newAge","setNewAge","validatedForm","setValidatedForm","clearInputs","name","age","value","nameHandler","length","ageHandler","useEffect","setErrorMode","setErrorText","addNewUser","className","onSubmit","event","preventDefault","target","htmlFor","type","id","disabled","errorMode","max","UserList","users","map","user","onClick","deleteChosenUser","title","ErrorModal","errorMessage","App","errorModeHandler","errorText","errorTextHandler","storedUsers","storedUsersHandler","userCount","userCountHandler","clickHandler","errorModalComponent","document","getElementById","childNodes","Array","prototype","isInsideErrorModal","parentNode","childNode","contains","addEventListener","removeEventListener","currentUsers","updatedUsers","unshift","usersArray","filteredArray","filter","item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d4b6144b.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport './UserBuilder.css';\r\n\r\n\r\nconst UserBuilder = (props) => {\r\n\r\n    // Name and error are values we're using in our useeffect to apply the effects of our submissions on the DOM render\r\n    const [nameError, setNameError] = useState(false);\r\n    const [ageError, setAgeError] = useState(false);\r\n    \r\n    // Create states in order to store and update our new name and age for our users\r\n    const [newName, setNewName] = useState('');\r\n    const [newAge, setNewAge] = useState('');\r\n\r\n    // Validate our form inputs once instead of multiple times with this state variable\r\n    const [validatedForm, setValidatedForm] = useState(false);\r\n\r\n    // Process the submission on our form when we submit the data\r\n    const submitHandler = (event) =>{\r\n        // Don't reload the form\r\n        event.preventDefault();\r\n\r\n        // Validate our submissions for the names and ages\r\n        nameHandler( event.target[0] );\r\n        ageHandler( event.target[1] );\r\n\r\n        // Empty our inputs before blocking off the inputs\r\n        clearInputs(event.target[0], event.target[1]);\r\n    }\r\n\r\n    // Empty our inputs if we enter something invalid as we're locking this section off\r\n    const clearInputs = (name, age) => {\r\n        // If we have a value in our output then set it to null\r\n        if( name.value !== null ){\r\n            name.value = '';\r\n        }\r\n        if( age.value !== null ){\r\n            age.value = '';\r\n        }\r\n    }\r\n\r\n    // Validate our name input, we're creating our error text later\r\n    const nameHandler = (name) =>{\r\n        if( name.value.length === 0 ){\r\n            setNameError(true);\r\n        }else{\r\n            setNameError(false);\r\n            setNewName( name.value );\r\n        }\r\n        setValidatedForm(true);\r\n    }\r\n\r\n    // Validate our age input, we're creating our error number later\r\n    const ageHandler = (age) =>{\r\n        ((age.value < 1) || (age.value.length === 0)) ? setAgeError( true ) : setAgeError( false );\r\n        if((age.value < 1) || (age.value.length === 0)){\r\n            setAgeError(true);\r\n        }else{\r\n            setAgeError(false);\r\n            setNewAge( age.value );\r\n        }\r\n        setValidatedForm(true);\r\n    }\r\n\r\n    // Update our page when we input new information instead of rendering twice\r\n    useEffect(() => {\r\n\r\n    if( validatedForm === true ){\r\n\r\n        // Depending on the error, we set our message here, then we change validatedForm so we only run this once\r\n        if( (nameError === true) && (ageError === true) ){\r\n            props.setErrorMode( true );\r\n            props.setErrorText( 'Please enter a valid name and age > 0' );\r\n        }else if( nameError === true ){\r\n            props.setErrorMode( true );\r\n            props.setErrorText( 'Please enter a valid name' );\r\n\r\n        }else if( ageError === true ){\r\n            props.setErrorMode( true );\r\n            props.setErrorText( 'Please enter an age > 0' );\r\n        }else{\r\n            props.setErrorMode( false );\r\n            props.addNewUser( newName, newAge );\r\n        }\r\n\r\n        //currentTarget.value = '';\r\n        setValidatedForm(false);\r\n\r\n    }\r\n\r\n    // Added depencies to reduce errors\r\n    },[validatedForm, nameError, ageError, props, newName, newAge]);\r\n\r\n    return(\r\n        <div className=\"userbuilder-form\">\r\n            <form onSubmit={ submitHandler }>\r\n                <label className=\"username-label\" htmlFor=\"username-text\"> Username </label>\r\n                <input type=\"text\" id=\"username-text\" disabled={ props.errorMode === true && 'disabled' }/>\r\n                <label className=\"age-label\" htmlFor=\"age-number\"> Age (Years) </label>\r\n                <input type=\"number\" max=\"100\" id=\"age-number\" disabled={ props.errorMode === true && 'disabled' }/>\r\n                <button type=\"submit\" disabled={ props.errorMode === true && 'disabled' }> Add User </button> \r\n                { /*<button className=\"neon-button\"> Neon Button </button>*/ }\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserBuilder;","import React, { useEffect } from \"react\";\r\nimport './UserList.css';\r\n\r\nconst UserList = (props) => {\r\n\r\n    // Create an array based on our initial entries and anything we add after that using two way binding\r\n    const listHandler = (user) => {\r\n        //console.log( `Current index: ${index} with a value of: ${value}` );\r\n        return(\r\n            <li key={ user.id } className=\"user-list-item\" onClick={ () => { props.deleteChosenUser(user, props.users); } } title={'Delete user'}> { user.name } ({ user.age }) </li>\r\n        );\r\n    }\r\n\r\n    useEffect(() => {\r\n \r\n    },[props]);\r\n\r\n    return(\r\n        <div className=\"user-list-section\">\r\n            <ul className=\"user-list-menu\">\r\n                { props.users.map(listHandler) }\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default UserList;","import React from \"react\";\r\nimport './ErrorModal.css';\r\n\r\nconst ErrorModal = (props) => {\r\n    \r\n    // Remove the overlay and allow us to place data inside our input fields again\r\n    const removeErrorMode = () => {\r\n        props.setErrorMode( false );\r\n    }\r\n\r\n    return(\r\n        <div className=\"errorModal\"  id={'errorModal'}>\r\n            <h1> Invalid Input </h1>\r\n            <p> { props.errorMessage } </p>\r\n            <button onClick={ removeErrorMode }> Okay </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ErrorModal;","import React, { useState, useEffect } from \"react\";\nimport './App.css';\nimport UserBuilder from './Components/UserModal/UserBuilder';\nimport UserList from './Components/UserModal/UserList';\nimport ErrorModal from './Components/ErrorModal/ErrorModal';\n\nfunction App() {\n\n  // Here we set our error mode and the text using two way binding ( passing states between parent and child elements )\n  const [errorMode, errorModeHandler] = useState( false );\n  const [errorText, errorTextHandler] = useState( 'no error' );\n\n  // Create a state of users here, we're doing this so we can manage this in our Userlist\n  const [storedUsers, storedUsersHandler] = useState(  \n    [{ id: 'user1', name: 'Nothile Moyo', age:'25 years old' },{ id: 'user2', name: 'Ross Kemp', age:'28 years old' }]\n  );\n\n  const [userCount, userCountHandler] = useState( storedUsers.length + 1 );\n\n  // Add a new user to our list \n  const addUser = (newName, newAge) =>{\n    userCountHandler( userCount + 1 );\n    storedUsersHandler( (currentUsers) => {\n\n      // Get a reference of our previous users\n      const updatedUsers = [...currentUsers];\n\n      // Add our new user with their name and age to our array\n      updatedUsers.unshift({  id: `user${userCount}`, name: newName, age: `${newAge} years old` });\n\n      // Pass this back with the new list of users\n      return updatedUsers;\n    } );\n  }\n\n  // Delete a user from our list \n  const deleteUser = (user, usersArray) => {\n \n    // We return a new array which excludes the previous user\n    let filteredArray = usersArray.filter((item) => {\n      return(item.id !== user.id);\n    });\n\n    // Update our list of users\n    storedUsersHandler(filteredArray);\n\n  }\n\n  // Hide the error modal when we click outside of it \n  const clickHandler = (event) => {\n\n    // Get our elements in the DOM\n    const errorModalComponent = document.getElementById('errorModal');\n\n    // Create an array we can map through in React\n    errorModalComponent.childNodes.map = Array.prototype.map;\n\n    // Check if we clicked on or inside the errorModal\n    if( isInsideErrorModal(event, errorModalComponent) === false){ errorModeHandler(false); }\n\n  }\n\n  // This checks the click area for the padding of the parentNode or any of the childNodes and returns a check on validation\n  const isInsideErrorModal = (event, parentNode) => {\n\n    for( let childNode of parentNode.childNodes ){\n      if( event.target.contains(childNode) ){\n        return(true);\n      }\n    }\n\n    // If we clicked outside the errorModal component\n    return(false);\n\n  }\n  \n  // Give us output on every DOM render in order to debug our code\n  useEffect(() =>{\n    document.title = \"Nothile's Userbuilder Form\";\n\n      document.addEventListener('mousedown', clickHandler);\n      return () => {\n          // Unbind the event listener on clean up\n          document.removeEventListener('mousedown', clickHandler);\n        };\n\n  });\n\n  return (\n    <div className={`userbuilder-components ${errorMode === true ? 'errorMode' : ''}`}>\n\n    { /* If there's an error, place an overlay over our form and list, inside of this we have the form and list so the overlay affects them */ }\n    <div className={ errorMode === true ? 'opaque-overlay' : ''}>\n      <UserBuilder setErrorMode={ errorModeHandler } setErrorText={ errorTextHandler } errorMode={ errorMode } addNewUser={ addUser }></UserBuilder>\n      <div className={ errorMode === true ? 'hideComponent' : ''}>\n        <UserList deleteChosenUser={ deleteUser } users={ storedUsers }></UserList>\n      </div>\n    </div>\n\n      {/* This is our error message modal, display it if there's an error and we place it outside the overlay and position it in the middle of the screen*/}\n      <div className={ errorMode === false ? 'hideComponent' : '' }>\n        <ErrorModal errorMessage={ errorText } setErrorMode={ errorModeHandler } errorMode={ errorMode }></ErrorModal>\n      </div>\n    </div>\n  );\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}